#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil expand-links:t f:t
#+options: inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: Proyecto ICCD332 Arquitectura de Computadores
#+date: 2024-08-07
#+author: Sebastian Chicaiza, Tamara Benavidez
#+email: sebastian.chicaiza@epn.edu.ec, tamara.benavidez@epn.edu.ec
#+language: es
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.1 (Org mode 9.7.5)
#+cite_export:
* City Weather APP
Este es el proyecto de fin de semestre en donde se pretende demostrar
las destrezas obtenidas durante el transcurso de la asignatura de
**Arquitectura de Computadores**.

1. Conocimientos de sistema operativo Linux
2. Conocimientos de Emacs/Jupyter
3. Configuración de Entorno para Data Science con Mamba/Anaconda
4. Literate Programming
 
** Estructura del proyecto
Se recomienda que el proyecto se cree en el /home/ del sistema
operativo i.e. /home/<user>/. Allí se creará la carpeta /CityWeather/
#+begin_src shell :results output :exports both
#cd ..
#cd ..
pwd
#+end_src

#+RESULTS:
: /home/QuitoWeather

El proyecto ha de tener los siguientes archivos y
subdirectorios. Adaptar los nombres de los archivos según las ciudades
específicas del grupo.

#+begin_src shell :results output :exports results
cd ..
cd ..
tree
#+end_src

#+RESULTS:
#+begin_example
.
├── CityTemperatureAnalysis.ipynb
├── CityTemperatureAnalysis.ipynb:Zone.Identifier
├── clima-berlin-hoy.csv
├── get-weather.sh
├── get-weather.sh:Zone.Identifier
├── main.py
├── main.py:Zone.Identifier
├── output.log
└── weather-site
    ├── build-site.el
    ├── build-site.el:Zone.Identifier
    ├── build.sh
    ├── build.sh:Zone.Identifier
    ├── content
    │   ├── images
    │   └── index.org
    └── public
        ├── images
        ├── index.html
        └── index.html:Zone.Identifier

6 directories, 15 files
#+end_example

Puede usar Emacs para la creación de la estructura de su proyecto
usando comandos desde el bloque de shell. Recuerde ejecutar el bloque
con ~C-c C-c~. Para insertar un bloque nuevo utilice ~C-c C-,~ o ~M-x
org-insert-structure-template~. Seleccione la opción /s/ para src y
adapte el bloque según su código tenga un comandos de shell, código de
Python o de Java. En este documento ~.org~ dispone de varios ejemplos
funcionales para escribir y presentar el código.

#+begin_src shell :results output :exports both
cd
mkdir CityWeather
cd CityWeather
touch clima-berlin-hoy.csv
touch output.log
mkdir weather-site
cd weather-site
mkdir public
cd public
mkdir images
cd ..
mkdir content
cd content
mkdir images
cd
mv index.org ~/CityWeather/weather-site/content/
cd CityWeather
tree
#+end_src

#+RESULTS:
#+begin_example
.
├── CityTemperatureAnalysis.ipynb
├── CityTemperatureAnalysis.ipynb:Zone.Identifier
├── clima-berlin-hoy.csv
├── get-weather.sh
├── get-weather.sh:Zone.Identifier
├── main.py
├── main.py:Zone.Identifier
├── output.log
└── weather-site
    ├── build-site.el
    ├── build-site.el:Zone.Identifier
    ├── build.sh
    ├── build.sh:Zone.Identifier
    ├── content
    │   ├── #index.org#
    │   ├── images
    │   └── index.org
    └── public
        ├── images
        ├── index.html
        └── index.html:Zone.Identifier

6 directories, 16 files
#+end_example

** Formulación del Problema
Se desea realizar un registro climatológico de una ciudad
$\mathcal{C}$. Para esto, escriba un script de Python/Java que permita
obtener datos climatológicos desde el API de [[https://openweathermap.org/current#one][openweathermap]]. El API
hace uso de los valores de latitud $x$ y longitud $y$ de la ciudad
$\mathcal{C}$ para devolver los valores actuales a un tiempo $t$.

Los resultados obtenidos de la consulta al API se escriben en un
archivo /clima-<ciudad>-hoy.csv/. Cada ejecución del script debe
almacenar nuevos datos en el archivo. Utilice *crontab* y sus
conocimientos de Linux y Programación para obtener datos del API de
/openweathermap/ con una periodicidad de 15 minutos mediante la
ejecución de un archivo ejecutable denominado
/get-weather.sh/. Obtenga al menos 50 datos. Verifique los
resultados. Todas las operaciones se realizan en Linux o en el
WSL. Las etapas del problema se subdividen en:

    1. Conformar los grupos de 2 estudiantes y definir la ciudad
       objeto de estudio.
    2.  Crear su API gratuito en [[https://openweathermap.org/current#one][openweathermap]]
    3. Escribir un script en Python/Java que realice la consulta al
       API y escriba los resultados en /clima-<ciudad>-hoy.csv/. El
       archivo ha de contener toda la información que se obtiene del
       API en columnas. Se debe observar que los datos sobre lluvia
       (rain) y nieve (snow) se dan a veces si existe el fenómeno.
    3. Desarrollar un ejecutable /get-weather.sh/ para ejecutar el
       programa Python/Java.[fn:1]
       #+begin_src shell :exports both
         
       #+end_src
    4. Configurar Crontab para la adquisición de datos. Escriba el
       comando configurado. Respalde la ejecución de crontab en un
       archivo output.log
    5. Realizar la presentación del Trabajo utilizando la generación
       del sitio web por medio de Emacs. Para esto es necesario crear
       la carpeta **weather-site** dentro del proyecto. Puede ajustar el
       /look and feel/ según sus preferencias. El servidor a usar es
       el **simple-httpd** integrado en Emacs que debe ser instalado:
       - Usando comandos Emacs: ~M-x package-install~ presionamos
         enter (i.e. RET) y escribimos el nombre del paquete:
         simple-httpd
       - Configurando el archivo init.el

       #+begin_src elisp
         (use-package simple-httpd
            :ensure t)
       #+end_src

       Instrucciones de sobre la creación del sitio web se tiene en el
       vídeo de instrucciones y en el archivo [[https://github.com/LeninGF/EPN-Lectures/blob/main/iccd332ArqComp-2024-A/Tutoriales/Org-Website/Org-Website.org][Org-Website.org]] en el
       GitHub del curso

    6. Su código debe estar respaldado en GitHub/BitBucket, la
       dirección será remitida en la contestación de la tarea
** Descripción del código
En esta sección se debe detallar segmentos importantes del código
desarrollado así como la **estrategia de solución** adoptada por el
grupo para resolver el problema. Divida su código en unidades
funcionales para facilitar su presentación y exposición.

Lectura del API
#+begin_src python :session :results output exports both
# Coordenadas de Berlín
BERLIN_LAT = 52.520008
BERLIN_LONGITUDE = 13.404954
API_KEY = "02b0db70fac81ab6e71999aa102b3b93"
FILE_NAME = "clima-berlin-hoy.csv"

print(BERLIN_LAT)
print(BERLIN_LONGITUDE)
print(API_KEY)
print(FILE_NAME)
#+end_src

#+RESULTS:
: 52.520008
: 13.404954
: 02b0db70fac81ab6e71999aa102b3b93
: clima-berlin-hoy.csv

Convertir /Json/ a /Diccionario/ de Python
#+begin_src python :session :results output exports both
def get_weather(lat, lon, api):
    """Obtiene los datos del clima de la API de OpenWeather."""
    url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={api}&units=metric"
    response = requests.get(url)
    
    if response.status_code == 200:
        return response.json()  # Devuelve el JSON con los datos
    else:
        return {"cod": 404}  # Si hay un error, devuelve código 4

#+end_src

#+RESULTS:


Guardar el archivo csv
#+begin_src python :session :results output exports both
def write2csv(json_response, csv_filename):
    """Guarda los datos del clima en un archivo CSV sin sobrescribir los datos anteriores."""
    
    # Verificar si el archivo ya existe para escribir los encabezados solo una vez
    file_exists = False
    try:
        with open(csv_filename, "r", encoding="utf-8") as file:
            file_exists = True
    except FileNotFoundError:
        pass  # Si el archivo no existe, lo creará después
    
    # Abrir en modo 'a' (append) para agregar nuevas filas sin sobrescribir
    with open(csv_filename, mode='a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        
        # Si el archivo no existía, escribir encabezados
        if not file_exists:
            writer.writerow([
                "dt", "coord_lon", "coord_lat", 
                "weather_0_id", "weather_0_main", "weather_0_description", "weather_0_icon", 
                "base", "main_temp", "main_feels_like", "main_temp_min", "main_temp_max", 
                "main_pressure", "main_humidity", "main_sea_level", "main_grnd_level", 
                "visibility", "wind_speed", "wind_deg", "wind_gust", "clouds_all", 
                "sys_type", "sys_id", "sys_country", "sys_sunrise", "sys_sunset", "timezone", 
                "id", "name", "cod"
            ])
        
        # Extraer los datos de la respuesta JSON con .get() para evitar errores si faltan valores
        writer.writerow([
            datetime.now().strftime("%Y-%m-%d %H:%M:%S"),  # Marca de tiempo (Unix)
            json_response.get("coord", {}).get("lon", ""),  # Longitud
            json_response.get("coord", {}).get("lat", ""),  # Latitud
            
            json_response.get("weather", [{}])[0].get("id", ""),  # ID de la condición meteorológica
            json_response.get("weather", [{}])[0].get("main", ""),  # Estado del clima principal (ej: Clouds)
            json_response.get("weather", [{}])[0].get("description", ""),  # Descripción del clima
            json_response.get("weather", [{}])[0].get("icon", ""),  # Icono del clima
            
            json_response.get("base", ""),  # Base de los datos meteorológicos
            
            json_response.get("main", {}).get("temp", ""),  # Temperatura actual
            json_response.get("main", {}).get("feels_like", ""),  # Sensación térmica
            json_response.get("main", {}).get("temp_min", ""),  # Temperatura mínima
            json_response.get("main", {}).get("temp_max", ""),  # Temperatura máxima
            json_response.get("main", {}).get("pressure", ""),  # Presión atmosférica
            json_response.get("main", {}).get("humidity", ""),  # Humedad en porcentaje
            json_response.get("main", {}).get("sea_level", ""),  # Presión a nivel del mar (si disponible)
            json_response.get("main", {}).get("grnd_level", ""),  # Presión a nivel del suelo (si disponible)
            
            json_response.get("visibility", ""),  # Visibilidad en metros
            
            json_response.get("wind", {}).get("speed", ""),  # Velocidad del viento
            json_response.get("wind", {}).get("deg", ""),  # Dirección del viento
            json_response.get("wind", {}).get("gust", ""),  # Ráfagas de viento (si disponible)
            
            json_response.get("clouds", {}).get("all", ""),  # Porcentaje de nubosidad
            
            json_response.get("sys", {}).get("type", ""),  # Tipo de sistema meteorológico
            json_response.get("sys", {}).get("id", ""),  # ID del sistema meteorológico
            json_response.get("sys", {}).get("country", ""),  # Código del país
            json_response.get("sys", {}).get("sunrise", ""),
            json_response.get("sys", {}).get("sunset", ""),  # Hora de la puesta del sol
            
            json_response.get("timezone", ""),  # Zona horaria en segundos
            json_response.get("id", ""),  # ID de la ciudad
            json_response.get("name", ""),  # Nombre de la ciudad
            json_response.get("cod", "")  # Código de estado de la API
        ])
    
    print(f"Datos agregados en {csv_filename}")
#+end_src

#+RESULTS:

** Script ejecutable sh
Se coloca el contenido del script ejecutable. Recuerde que se debe
utilizar el entorno de **anaconda/mamba** denominado **iccd332** para
la ejecución de Python; independientemente de que tenga una
instalación nativa de Python

En el caso de los shell script se puede usar `which sh` para conocer
la ubicación del ejecutable
#+begin_src shell :results output :exports both
which sh
#+end_src

#+RESULTS:
: /usr/bin/sh

De igual manera se requiere localizar el entorno de mamba *iccd332*
que será utilizado

#+begin_src shell :results output :exports both
which mamba
#+end_src

#+RESULTS:
: /home/alejandro-epn/miniforge3/condabin/mamba

Con esto el archivo ejecutable a de tener (adapte el código según las
condiciones de su máquina):

#+begin_src shell :results output :exports both
#!/usr/bin/sh
source /home/alejandro-epn/miniforge3/etc/profile.d/conda.sh
eval "$(conda shell.bash hook)"
conda activate iccd332
python ~/CityWeather/main.py
#+end_src

#+RESULTS:
: ===== Bienvenido a Quito-Clima =====

Finalmente convierta en ejecutable como se explicó en clases y laboratorio
#+begin_src shell :results output :exports both
#!/usr/bin/sh
Poner comando/s aquí
#+end_src

** Configuración de Crontab
Se indica la configuración realizada en crontab para la adquisición de datos

#+begin_src shell
*/15 * * * * cd ~/CityWeather && ./get-weather.sh >> output.log 2>&1
#+end_src

#+RESULTS:

- Recuerde remplazar <City> por el nombre de la ciudad que analice
- Recuerde ajustar el tiempo para potenciar tomar datos nuevos
- Recuerde que ~2>&1~ permite guardar en ~output.log~ tanto la salida
  del programa como los errores en la ejecución.
* Presentación de resultados
Para la pressentación de resultados se utilizan las librerías de Python:
- matplotlib
- pandas

Alternativamente como pudo estudiar en el Jupyter Notebook
[[https://github.com/LeninGF/EPN-Lectures/blob/main/iccd332ArqComp-2024-A/Proyectos/CityWeather/CityTemperatureAnalysis.ipynb][CityTemperatureAnalysis.ipynb]], existen librerías alternativas que se
pueden utilizar para presentar los resultados gráficos. En ambos
casos, para que funcione los siguientes bloques de código, es
necesario que realice la instalación de los paquetes usando ~mamba
install <nombre-paquete>~
** Muestra Aleatoria de datos
Presentar una muestra de 10 valores aleatorios de los datos obtenidos.
#+caption: Lectura de archivo csv

#+begin_src python :session :results output exports both
import os
import pandas as pd

# lectura del archivo csv obtenido
df = pd.read_csv('/home/alejandro-epn/CityWeather/clima-berlin-hoy-etl.csv')
# se imprime la estructura del dataframe en forma de filas x columnas
print(df.shape)
#+end_src

#+RESULTS:
: (24, 30)

Resultado del número de filas y columnas leídos del archivo csv
#+RESULTS:
: (57, 30)
#+caption: Despliegue de datos aleatorios
#+begin_src python :session :exports both :results value table :return table
table1 = df.sample(10)
table = [list(table1)]+[None]+table1.values.tolist()
#+end_src

#+RESULTS:
| dt                  | coord_lon | coord_lat | weather_0_id | weather_0_main | weather_0_description | weather_0_icon | base     | main_temp | main_feels_like | main_temp_min | main_temp_max | main_pressure | main_humidity | main_sea_level | main_grnd_level | visibility | wind_speed | wind_deg | wind_gust | clouds_all | sys_type |  sys_id | sys_country | sys_sunrise         | sys_sunset          | timezone |      id | name  | cod |
|---------------------+-----------+-----------+--------------+----------------+-----------------------+----------------+----------+-----------+-----------------+---------------+---------------+---------------+---------------+----------------+-----------------+------------+------------+----------+-----------+------------+----------+---------+-------------+---------------------+---------------------+----------+---------+-------+-----|
| 2025-02-07 23:45:15 |    13.405 |     52.52 |          804 | Clouds         | overcast clouds       | 04n            | stations |      1.11 |           -3.88 |          0.55 |          1.66 |          1030 |            76 |           1030 |            1024 |      10000 |       5.66 |       90 |       nan |        100 |        2 | 2009543 | DE          | 2025-02-08 01:36:06 | 2025-02-08 11:05:07 |     3600 | 6545310 | Mitte | 200 |
| 2025-02-07 23:40:03 |    13.405 |     52.52 |          804 | Clouds         | overcast clouds       | 04n            | stations |      1.13 |           -3.85 |          0.55 |          1.66 |          1030 |            76 |           1030 |            1024 |      10000 |       5.66 |       90 |       nan |        100 |        2 | 2009543 | DE          | 2025-02-08 01:36:06 | 2025-02-08 11:05:07 |     3600 | 6545310 | Mitte | 200 |
| 2025-02-07 23:45:17 |    13.405 |     52.52 |          804 | Clouds         | overcast clouds       | 04n            | stations |      1.11 |           -3.88 |          0.55 |          1.66 |          1030 |            76 |           1030 |            1024 |      10000 |       5.66 |       90 |       nan |        100 |        2 | 2009543 | DE          | 2025-02-08 01:36:06 | 2025-02-08 11:05:07 |     3600 | 6545310 | Mitte | 200 |
| 2025-02-08 00:05:04 |      13.4 |     52.52 |          804 | Clouds         | overcast clouds       | 04n            | stations |      1.01 |           -4.29 |          0.13 |           1.7 |          1030 |            73 |           1030 |            1024 |      10000 |       6.26 |       93 |      8.49 |        100 |        2 | 2009543 | DE          | 2025-02-08 01:36:07 | 2025-02-08 11:05:08 |     3600 | 6545310 | Mitte | 200 |
| 2025-02-08 07:15:03 |    13.405 |     52.52 |          800 | Clear          | clear sky             | 01d            | stations |      5.09 |             1.9 |          4.07 |           6.1 |          1029 |            68 |           1029 |            1023 |      10000 |       4.12 |      100 |       nan |          0 |        2 | 2009543 | DE          | 2025-02-08 01:36:06 | 2025-02-08 11:05:07 |     3600 | 6545310 | Mitte | 200 |
| 2025-02-07 23:45:12 |    13.405 |     52.52 |          804 | Clouds         | overcast clouds       | 04n            | stations |      1.11 |           -3.88 |          0.55 |          1.66 |          1030 |            76 |           1030 |            1024 |      10000 |       5.66 |       90 |       nan |        100 |        2 | 2009543 | DE          | 2025-02-08 01:36:06 | 2025-02-08 11:05:07 |     3600 | 6545310 | Mitte | 200 |
| 2025-02-07 23:55:02 |    13.405 |     52.52 |          804 | Clouds         | overcast clouds       | 04n            | stations |      1.08 |           -3.99 |          0.55 |          1.66 |          1030 |            76 |           1030 |            1024 |      10000 |       5.81 |       99 |      8.49 |        100 |        2 | 2009543 | DE          | 2025-02-08 01:36:06 | 2025-02-08 11:05:07 |     3600 | 6545310 | Mitte | 200 |
| 2025-02-08 07:20:02 |    13.405 |     52.52 |          800 | Clear          | clear sky             | 01d            | stations |      5.09 |             1.9 |          4.07 |           6.1 |          1029 |            68 |           1029 |            1023 |      10000 |       4.12 |      100 |       nan |          0 |        2 | 2009543 | DE          | 2025-02-08 01:36:06 | 2025-02-08 11:05:07 |     3600 | 6545310 | Mitte | 200 |
| 2025-02-08 00:10:03 |      13.4 |     52.52 |          804 | Clouds         | overcast clouds       | 04n            | stations |      1.23 |           -3.72 |          0.63 |           1.7 |          1030 |            76 |           1030 |            1024 |      10000 |       5.66 |       90 |       nan |        100 |        2 | 2009543 | DE          | 2025-02-08 01:36:07 | 2025-02-08 11:05:08 |     3600 | 6545310 | Mitte | 200 |
| 2025-02-07 23:45:27 |    13.405 |     52.52 |          804 | Clouds         | overcast clouds       | 04n            | stations |      1.11 |           -3.88 |          0.55 |          1.66 |          1030 |            76 |           1030 |            1024 |      10000 |       5.66 |       90 |       nan |        100 |        2 | 2009543 | DE          | 2025-02-08 01:36:06 | 2025-02-08 11:05:07 |     3600 | 6545310 | Mitte | 200 |

** Gráfica Temperatura vs Tiempo
Realizar una gráfica de la Temperatura en el tiempo.


El siguiente cógido permite hacer la gráfica de la temperatura vs
tiempo para Org 9.7+. Para saber que versión dispone puede ejecutar
~M-x org-version~

#+begin_src python :results file :exports both :session
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
# Define el tamaño de la figura de salida
fig = plt.figure(figsize=(8,6))
plt.plot(df['dt'], df['main_temp']) # dibuja las variables dt y temperatura
# ajuste para presentacion de fechas en la imagen 
plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=2))
# plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))  
plt.grid()
# Titulo que obtiene el nombre de la ciudad del DataFrame
plt.title(f'Main Temp vs Time in {next(iter(set(df.name)))}')
plt.xticks(rotation=40) # rotación de las etiquetas 40°
fig.tight_layout()
fname = './images/temperature.png'
plt.savefig(fname)
fname
#+end_src

#+caption: Gráfica Temperatura vs Tiempo
#+RESULTS:
[[file:./images/temperature.png]]

Debido a que el archivo index.org se abre dentro de la carpeta
/content/, y en cambio el servidor http de emacs se ejecuta desde la
carpeta /public/ es necesario copiar el archivo a la ubicación
equivalente en ~/public/images~

#+begin_src shell
cp -rfv ./images/* /home/alejandro-epn/CityWeather/weather-site/public/images
#+end_src

#+RESULTS:
| './images/humidity.png'    | -> | '/home/alejandro-epn/CityWeather/weather-site/public/images/humidity.png'    |
| './images/temperature.pdf' | -> | '/home/alejandro-epn/CityWeather/weather-site/public/images/temperature.pdf' |
| './images/temperature.png' | -> | '/home/alejandro-epn/CityWeather/weather-site/public/images/temperature.png' |

**  Realice una gráfica de Humedad con respecto al tiempo
#+begin_src python :results file :exports both :session
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
# Define el tamaño de la figura de salida
fig = plt.figure(figsize=(8,6))
plt.plot(df['dt'], df['main_humidity']) # dibuja las variables dt y temperatura
# ajuste para presentacion de fechas en la imagen 
plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=2))
# plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))  
plt.grid()
# Titulo que obtiene el nombre de la ciudad del DataFrame
plt.title(f' Main Humidity vs Time in {next(iter(set(df.name)))}')
plt.xticks(rotation=40) # rotación de las etiquetas 40°
fig.tight_layout()
fname = './images/humidity.png'
plt.savefig(fname)
fname
#+end_src

#+RESULTS:
[[file:./images/humidity.png]]

**  *Opcional* Presente alguna gráfica de interés.

* Referencias
- [[https://emacs.stackexchange.com/questions/28715/get-pandas-data-frame-as-a-table-in-org-babel][presentar dataframe como tabla en emacs org]]
- [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html][Python Source Code Blocks in Org Mode]]
- [[https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site/][Systems Crafters Construir tu sitio web con Modo Emacs Org]]
- [[https://www.youtube.com/watch?v=AfkrzFodoNw][Vídeo Youtube Build Your Website with Org Mode]]
* Footnotes

[fn:1] Recuerde que su máquina ha de disponer de un entorno de
anaconda/mamba denominado iccd332 en el cual se dispone del interprete
de Python
